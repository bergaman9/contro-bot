name: Auto Version Update

on:
  push:
    branches:
      - main

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver
      
      - name: Update version
        id: version
        run: |
          # Read current version from config file with proper error handling
          if [ -f "config/version_config.json" ]; then
            CURRENT_VERSION=$(grep -o '"version"\s*:\s*"[^"]*"' config/version_config.json | cut -d'"' -f4)
            echo "Found config file with version: $CURRENT_VERSION"
          else
            echo "Warning: version_config.json not found, using default version"
            CURRENT_VERSION="1.0.0"
          fi
          
          # Ensure we have a valid version string
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Warning: Empty version detected, using default version"
            CURRENT_VERSION="1.0.0"
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Determine if this is a major, minor, or patch update based on commit messages
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          if [[ "$COMMIT_MSG" == *"[MAJOR]"* ]]; then
            NEW_VERSION=$(python -c "import semver; print(semver.bump_major('$CURRENT_VERSION'))")
          elif [[ "$COMMIT_MSG" == *"[MINOR]"* ]]; then
            NEW_VERSION=$(python -c "import semver; print(semver.bump_minor('$CURRENT_VERSION'))")
          else
            NEW_VERSION=$(python -c "import semver; print(semver.bump_patch('$CURRENT_VERSION'))")
          fi
          
          echo "New version: $NEW_VERSION"
          
          # Update version in config file
          if [ -f "config/version_config.json" ]; then
            sed -i "s/\"version\"\s*:\s*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" config/version_config.json
          else
            # Create config file if it doesn't exist
            mkdir -p config
            echo "{\"version\": \"$NEW_VERSION\"}" > config/version_config.json
          fi
          
          # Ensure CHANGELOG directory exists
          mkdir -p docs
          
          # Update version in CHANGELOG
          DATE=$(date +"%Y-%m-%d")
          if [ -f "docs/CHANGELOG.md" ]; then
            echo -e "## [$NEW_VERSION] - $DATE\n\n$COMMIT_MSG\n\n$(cat docs/CHANGELOG.md)" > docs/CHANGELOG.md
          else
            echo -e "# Changelog\n\n## [$NEW_VERSION] - $DATE\n\n$COMMIT_MSG\n" > docs/CHANGELOG.md
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add config/version_config.json docs/CHANGELOG.md
          git commit -m "Auto-update version to ${{ steps.version.outputs.version }}"
          git push origin HEAD:main 